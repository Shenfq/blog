(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{449:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"理论基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#理论基础"}},[t._v("#")]),t._v(" 理论基础")]),t._v(" "),s("h3",{attrs:{id:"什么是神经网络"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是神经网络"}},[t._v("#")]),t._v(" 什么是神经网络")]),t._v(" "),s("p",[t._v("我们知道深度学习是机器学习的一个分支，是一种以人工神经网络为架构，对数据进行表征学习的算法。而深度神经网络又是深度学习的一个分支，它在 wikipedia 上的解释如下：")]),t._v(" "),s("blockquote",[s("p",[t._v("深度神经网络（Deep Neural Networks, DNN）是一种判别模型，具备至少一个隐层的神经网络，可以使用反向传播算法进行训练。权重更新可以使用下式进行随机梯度下降法求解。")])]),t._v(" "),s("p",[t._v("首先我们可以知道，深度神经网络是一种判别模型。意思就是已知变量 x ，通过判别模型可以推算出 y。比如机器学习中常用到的案例，通过手写数字，模型推断出手写的是数字几。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/Fjw7fiWg-n1qXji4aX9DUz10Nrqa.png",alt:"image"}})]),t._v(" "),s("p",[t._v("深度神经网络中的“深度”指的是一系列连续的表示层，数据模型中包含了多少层，这就被称为模型的“深度”。通过这些层我们可以对数据进行高层的抽象。如下图所示，深度神级网络由一个输入层，多个（至少一个）隐层，以及一个输出层构成，而且输入层与输出层的数量不一定是对等的。每一层都有若干个神经元，神经元之间有连接权重。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/FuBpmY1q3QeBX22BvqjMUV2ea1U0.png",alt:"image"}})]),t._v(" "),s("p",[t._v("还是上面的案例，识别手写数字，手写的数字要怎么转成输入呢？既然是手写，那么肯定是一张图片，图片由多个像素点组成，这些像素点可以构成一个输入，经过多层神经网络，输出10个数字，这个10个数字就代表了数字 0 ~ 9 的概率。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/FsdJBzIsxftYo9e89lUwU2wlx5O7.png",alt:"image"}})]),t._v(" "),s("h3",{attrs:{id:"神经元如何输入输出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#神经元如何输入输出"}},[t._v("#")]),t._v(" 神经元如何输入输出")]),t._v(" "),s("p",[t._v("神经网络中的每个神经元都可以看成是一个简单的线性函数，下面我们构造一个简单的三层的神经网络来看看。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/FnQlw8WyQxZ-iszYHdFur7PxwrY0.png",alt:"image"}})]),t._v(" "),s("p",[t._v("如上图所示，n1 可以表示为：")]),t._v(" "),s("p",[t._v("$$\nn_1 = w_{1,1}x_1 + w_{2,1}x_2 + w_{3,1}x_3 + b\n$$")]),t._v(" "),s("p",[t._v("其中 $w_{1,1}$ 表示神经元之间的权重，b 为一个常量，作为函数的偏移量。较小的权重可以弱化某个神经元对下一个神经元造成的影响，而较大的权重将放大信号。假设 $w_{1,1}$ 为 0.1，$w_{3,1}$ 为 0.7，那么 x3 对 n1 的影响要大于 x1。你可能会问，为什么每个神经元要与其他所有层的神经元相互连接？")]),t._v(" "),s("p",[t._v("这里主要由两个原因：")]),t._v(" "),s("ol",[s("li",[t._v("完全连接的形式相对容易的编写成计算机指令。")]),t._v(" "),s("li",[t._v("在神经网络训练的过程中会弱化实际上不需要的连接（也就是某些连接权重会慢慢趋近于 0）。")])]),t._v(" "),s("p",[t._v("实际上通过计算得到 n1 后，其实不能立马用于后面的计算，还需要经过一个激活函数（一般为 sigmod 函数）。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/Fvu_bZlZ1vUg249qL6Rjvox19GXg.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/Ft059zilmQAlgRWVCl56_DV_MjoB.png",alt:"sigmod 函数"}})]),t._v(" "),s("p",[t._v("其作用主要是引入非线性因素。如果神级网络中只有上面那种线性函数，无论有多少层，结果始终是线性的。")]),t._v(" "),s("h4",{attrs:{id:"实际案例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实际案例"}},[t._v("#")]),t._v(" 实际案例")]),t._v(" "),s("p",[t._v("为了方便计算，我们构造一个只有两层的神经网络，演示一下具体的计算过程。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/FozUDE0MOGnnoMqGhIOzVlFekc-k.png",alt:"image"}})]),t._v(" "),s("p",[t._v("先通过线性函数求得一个 x 值，再把 x 值带入激活函数，得到 y1 的值。")]),t._v(" "),s("p",[t._v("$$\nx = w_{1,1}x_1 + w_{2,1}x_2 = (1.0 * 0.9) + (0.5 * 0.3) = 1.05\n$$")]),t._v(" "),s("p",[t._v("$$\ny_1 = 1 / (1 + e ^{-x}) = 1 / (1 + 0.3499) = 0.7408\n$$")]),t._v(" "),s("h3",{attrs:{id:"矩阵乘法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#矩阵乘法"}},[t._v("#")]),t._v(" 矩阵乘法")]),t._v(" "),s("p",[t._v("其实上面的计算过程，很容易通过矩阵乘法的方式表示。矩阵这个东西，说简单点就是一个表格，或者一个二维数组。如下图所示，就是一个典型的矩阵。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/Fle6c7tCJeSpI56GXYLhpDvI5F9o.png",alt:"image"}})]),t._v(" "),s("p",[t._v("那么矩阵的乘法可以表示为：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/Fl5i9c6pmYwtkwupgDlppqaA-YsD.png",alt:"image"}})]),t._v(" "),s("p",[t._v("矩阵的乘法通常被成为点乘或者内积。如果我们将矩阵内的数字换成我们神经网络的输入和权重，你会发现原来前面的计算如此简单。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/FvkpHJlq3aCNMqw-plANUCRp3_r-.png",alt:"image"}})]),t._v(" "),s("p",[t._v("获得点积后，只需要代入到激活函数，就能获得输出了。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/Fh7GrdgN0p0Y0Ys5qrcQUxdqVx3N.png",alt:"image"}})]),t._v(" "),s("p",[t._v("通过矩阵计算过程可以表示为：")]),t._v(" "),s("p",[t._v("$$\nX_{hidden} = W_{input_hidden} · I_{input}")]),t._v(" "),s("p",[t._v("O_{hidden} = sigmoid(X_{hidden})\n$$")]),t._v(" "),s("h4",{attrs:{id:"实际案例-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实际案例-2"}},[t._v("#")]),t._v(" 实际案例")]),t._v(" "),s("p",[t._v("下面通过矩阵来表示一个三层神经网络的计算过程。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/Fipyv33DnVPnwP-GY55JevCWbFOk.png",alt:"image"}})]),t._v(" "),s("p",[t._v("上图只给出了输入层到隐层的计算过程，感兴趣可以自己手动计算下，隐层到输出层的计算过程。隐层到输出层的权重矩阵如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/FlAAJfkpy5sVbAfRcFh5SC084ufW.png",alt:"image"}})]),t._v(" "),s("h3",{attrs:{id:"反向传播"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反向传播"}},[t._v("#")]),t._v(" 反向传播")]),t._v(" "),s("p",[t._v("进过一轮神经网络计算得到输出值，通常与我们实际想要的值是不一致的，这个时候我们会得到一个误差值（误差值就是训练数据给出的正确答案与实际输出值之间的差值）。但是这个误差是多个节点共同作用的结果，我们到底该用何种方式来更新各个连接的权重呢？这个时候我们就需要通过反向传播的方式，求出各个节点的误差值。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/Fs3p0gufO8D59AXgizAwXk4VI3vU.png",alt:"image"}})]),t._v(" "),s("p",[t._v("下面我们代入具体值，进行一次计算。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/Fn2bljmwTC0IIqdAldaMKpv-WQ5N.png",alt:"image"}})]),t._v(" "),s("p",[t._v("上图中可以看到 $e_1$ 的误差值主要由 $w_{1,1}$ 和 $w_{2,1}$ 造成，那么其误差应当分散到两个连接上，可以按照两个连接的权重对误差 $e_1$ 进行分割。")]),t._v(" "),s("p",[t._v("$$\ne_1 * \\frac{w_{1,1}}{w_{1,1} + w_{2,1}} = 0.8 * \\frac{2}{2 + 3} = 0.32\n$$")]),t._v(" "),s("p",[t._v("$$\ne_1 * \\frac{w_{2,1}}{w_{1,1} + w_{2,1}} = 0.8 * \\frac{3}{2 + 3} = 0.48\n$$")]),t._v(" "),s("p",[t._v("同理对误差 $e_2$ 进行分割，然后把两个连接处的误差值相加，就能得到输出点的前馈节点的误差值。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/FrCafEfslODTYVqrV6pFZaMI-TiG.png",alt:"image"}})]),t._v(" "),s("p",[t._v("然后在按照之前的方法将这个误差传播到前面的层，直到所有节点都能得到自己的误差值，这种方式被成为反向传播。")]),t._v(" "),s("h4",{attrs:{id:"使用矩阵乘法进行反向传播误差"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用矩阵乘法进行反向传播误差"}},[t._v("#")]),t._v(" 使用矩阵乘法进行反向传播误差")]),t._v(" "),s("p",[t._v("上面如此繁琐的操作，我们也可以通过矩阵的方式进行简化。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/FmYWgu8b1lMgQxEqynXOxxllgaYa.png",alt:"image"}})]),t._v(" "),s("p",[t._v("这个矩阵中还是有麻烦的分数需要处理，那么我们能不能大胆一点，将分母直接做归一化的处理。这么做我们仅仅只是改变了反馈误差的大小，其误差依旧是按照比例来计算的。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/FjD8lHUXF7Ytn9W8YWcnHOUa28-9.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/FmdzXGU-rU3BCo-Mz3eNvKckP-wE.png",alt:"image"}})]),t._v(" "),s("p",[t._v("仔细观察会发现，与我们之前计算每层的输出值的矩阵点击很像，只是权重矩阵进行翻转，右上方的元素变成了左下方的元素，我们可以称其为转置矩阵，记为 $ w^T $。")]),t._v(" "),s("p",[t._v("反向传播误差的矩阵可以简单表示为：")]),t._v(" "),s("p",[t._v("$$\nerror_{hidden} = W^{T}"),s("em",[t._v("{hidden_output} · error")]),t._v("{output}\n$$")]),t._v(" "),s("h3",{attrs:{id:"梯度下降"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#梯度下降"}},[t._v("#")]),t._v(" 梯度下降")]),t._v(" "),s("p",[t._v("在每个点都得到误差后，我们该按照何种方式来更新权重呢？")]),t._v(" "),s("p",[t._v("这个时候就要使用到机器学习中常用的方式：梯度下级。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/FsrJBt8QxtpMcJ2qpJeeTAR0sYTW.png",alt:"image"}})]),t._v(" "),s("p",[t._v("更多细节可以参考我之前写的博客："),s("a",{attrs:{href:"https://blog.shenfq.com/2019/01/28/2019/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E4%B8%8E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/",target:"_blank",rel:"noopener noreferrer"}},[t._v("梯度下降与线性回归"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("通过不停的训练，我们就能改进神经网络，其本质就是不断地改变权重的大小，减小神经网络输出的误差值。\n最后就能够得到一个多层神经网络的模型，通过输入进行有效的预测。")]),t._v(" "),s("h2",{attrs:{id:"实战"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实战"}},[t._v("#")]),t._v(" 实战")]),t._v(" "),s("h3",{attrs:{id:"环境准备"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#环境准备"}},[t._v("#")]),t._v(" 环境准备")]),t._v(" "),s("p",[t._v("首先需要安装 python3 ，直接去 python 官网安装，尽量安装最新版，不推荐安装 python2 。安装好 python 环境之后，然后安装 virtualenv 以及相关依赖。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 升级 pip 到最新版本")]),t._v("\npip3 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--upgrade")]),t._v(" pip\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装 virtualenv ，用于配置虚拟环境")]),t._v("\npip3 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--user")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--upgrade")]),t._v(" virtualenv\n")])])]),s("p",[t._v("正常情况下，当我们在使用 pip 进行包安装的时候，都是安装的全局包，相当于"),s("code",[t._v("npm install -g")]),t._v("。假如现在有两个项目，项目 A 依赖 simplejson@2 ，项目 B 依赖 simplejson@3，这样我们在一台机器上开发显得有些手足无措。这个时候 virtualenv 就能大展身手了，virtualenv 可以创建一个独立的 python 运行环境，也就是一个沙箱，你甚至可以在 virtualenv 创建的虚拟环境中使用与当前系统不同的 python 版本。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置虚拟环境")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" ~/ml\nvirtualenv "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("env")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动虚拟环境")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# linux")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("source")]),t._v(" env/bin/activate\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# windows")]),t._v("\n./env/Scripts/activate\n\n")])])]),s("p",[t._v("启动后，如下")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("env"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" λ \n")])])]),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/Fn5PT4ZTWJRwwnOIMTRAP6AZV07z.png",alt:"image"}})]),t._v(" "),s("p",[t._v("在虚拟环境下安装所有模块依赖。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装模块和依赖")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("env"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" λ pip3 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--upgrade")]),t._v(" jupyter matplotlib numpy scipy\n")])])]),s("ul",[s("li",[s("p",[t._v("jupyter：基于网页的用于交互计算的应用程序。其可被应用于全过程计算：开发、文档编写、运行代码和展示结果。")])]),t._v(" "),s("li",[s("p",[t._v("numpy：数组计算扩展的包，支持高维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。")])]),t._v(" "),s("li",[s("p",[t._v("scipy：基于numpy的扩展包，它增加的功能包括数值积分、最优化、统计和一些专用函数。")])]),t._v(" "),s("li",[s("p",[t._v("matplotlib：基于numpy的扩展包，提供了丰富的数据绘图工具，主要用于绘制一些统计图形。")])]),t._v(" "),s("li",[s("p",[t._v("scikit-learn：开源的Python机器学习库，它基于Numpy和Scipy，提供了大量用于数据挖掘和分析的工具，包括数据预处理、交叉验证、算法与可视化算法等一系列接口。")])])]),t._v(" "),s("h4",{attrs:{id:"启动-jupyter"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启动-jupyter"}},[t._v("#")]),t._v(" 启动 jupyter")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("jupyter notebook\n")])])]),s("p",[t._v("jupyter 会在8888端口起一个服务，并自动打开浏览器。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/FoIVlLx4Rsh81RLyGmgZ5r0lyuZe.png",alt:"image"}})]),t._v(" "),s("p",[t._v("通过右上角的new，你就能创建一个项目了。创建项目后，我们很方便的在该页面上进行 python 代码的运行与输出。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/FmSvJC2Uv_plGVynXbzcWsNfeyEV.gif",alt:"image"}})]),t._v(" "),s("h4",{attrs:{id:"准备数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#准备数据"}},[t._v("#")]),t._v(" 准备数据")]),t._v(" "),s("p",[t._v("MNIST 是由美国的高中生和美国人口调查局的职员手写数字（0 ~ 9）图片。接下来要做的事情就是让我们的程序学习这些图片的信息，能够识别出输入的图片所代表的数字含义，这听上去好像有点难度，不着急，我们一步步来。")]),t._v(" "),s("p",[t._v("这里准备了 MNIST 的训练数据，其中 "),s("code",[t._v("train_100")]),t._v(" 为训练数据集，"),s("code",[t._v("test_10")]),t._v(" 为测试数据集。在机器学习的过程中，我们一般会将数据集切分成两个，分别为训练集合测试集，一般 80% 的数据进行训练，保留 20% 用于测试。这里因为是 hello world 操作，我们只用 100 个数据进行训练，真实情况下，这种数据量是远远不够的。")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://raw.githubusercontent.com/makeyourownneuralnetwork/makeyourownneuralnetwork/master/mnist_dataset/mnist_train_100.csv",target:"_blank",rel:"noopener noreferrer"}},[t._v("mnist_train_100.csv"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://raw.githubusercontent.com/makeyourownneuralnetwork/makeyourownneuralnetwork/master/mnist_dataset/mnist_test_10.csv",target:"_blank",rel:"noopener noreferrer"}},[t._v("mnist_test_10.csv"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("如果想用完整的数据进行训练，可以下载这个 csv 文件。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://pjreddie.com/media/files/mnist_train.csv",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://pjreddie.com/media/files/mnist_train.csv"),s("OutboundLink")],1)]),t._v(" "),s("h4",{attrs:{id:"观察数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#观察数据"}},[t._v("#")]),t._v(" 观察数据")]),t._v(" "),s("p",[t._v("下载数据后，将 csv （逗号分隔值文件格式）文件放入到 datasets 文件夹，然后使用 python 进行文件的读取。")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("data_file "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"datasets/mnist_train_100.csv"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'r'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndata_list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" data_file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readlines"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# readlines方法用于读取文件的所有行，并返回一个数组")]),t._v("\ndata_file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("close"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 数组长度为100")]),t._v("\n")])])]),s("p",[t._v("打印第一行文本，看看数据的格式是怎么样的")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("split"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("','")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用 , 进行分割，将字符串转换为数组")]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/FpwLohSBEtk8nhG2dyGeE91jZwHe.png",alt:"image"}})]),t._v(" "),s("p",[t._v("可以看到一行数据一共有 785 个数据，第一列表示这个手写数的真实值（这个值在机器学习中称为标签），后面的 784 个数据表示一个 28 * 28 的尺寸的像素值，流行的图像处理软件通常用8位表示一个像素，这样总共有256个灰度等级(像素值在0~255 间)，每个等级代表不同的亮度。")]),t._v(" "),s("p",[t._v("下面我们导入 numpy 库，对数据进行处理，values[1:] 取出数组的第一位到最后并生成一个新的数组，使用 numpy.asfarray 将数组转为一个浮点类型的 ndarray，然后每一项除以 255 在乘以 9，将每个数字转为 0 ~ 9 的个位数，使用 astype(int) 把每个数再转为 int 类型，最后 reshape((28,28) 可以把数组转为 28 * 28 的二维数组。")]),t._v(" "),s("p",[t._v("如果想了解更多 numpy 的资料，可以查看它的"),s("a",{attrs:{href:"https://www.numpy.org.cn/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("文档"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" numpy "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" np\n\nvalues "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" data_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("split"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("','")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nimage_array "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("asfarray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("values"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("astype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reshape"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("28")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("28")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/FrwDGzwLUk0yEgKOvPPRCykAOJWg.png",alt:"image"}})]),t._v(" "),s("p",[t._v("这样看不够直观，接下来使用 matplotlib ，将像素点一个个画出来。")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" matplotlib"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pyplot\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("matplotlib inline\n\nmatplotlib"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pyplot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("imshow"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("asfarray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("values"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reshape"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("28")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("28")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    cmap"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Greys'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    interpolation"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'None'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/FjeF-u3KhHB0ii7ryTNiR1Aji28v.png",alt:"image"}})]),t._v(" "),s("h3",{attrs:{id:"搭建神经网络"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#搭建神经网络"}},[t._v("#")]),t._v(" 搭建神经网络")]),t._v(" "),s("p",[t._v("我们简单勾勒出神经网络的大概样子，至少需要三个函数：")]),t._v(" "),s("ol",[s("li",[t._v("初始化函数——设定输入层、隐藏层、输出层节点的数量，随机生成的权重。")]),t._v(" "),s("li",[t._v("训练——学习给定的训练样本，调整权重。")]),t._v(" "),s("li",[t._v("查询——给定输入，获取预测结果。")])]),t._v(" "),s("p",[t._v("框架代码如下：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 引入依赖库")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" numpy "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" np\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" scipy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("special\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" matplotlib"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pyplot\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 神经网络类定义")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("neuralNetwork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 初始化神经网络")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 训练神经网络")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("train")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n   \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查询神经网络")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("query")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n")])])]),s("h4",{attrs:{id:"初始化神经网络"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化神经网络"}},[t._v("#")]),t._v(" 初始化神经网络")]),t._v(" "),s("p",[t._v("接下来让我们进行第一步操作，初始化一个神经网络。")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 初始化神经网络")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" inputnodes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hiddennodes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" outputnodes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" learningrate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置输入层、隐藏层、输出层节点的数量")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inodes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" inputnodes\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hnodes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" hiddennodes\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onodes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" outputnodes\n        \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 连接权重，随机生成输入层到隐藏层和隐藏层到输出层的权重")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("wih "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("random"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rand"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hnodes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inodes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("who "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("random"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rand"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onodes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hnodes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 学习率")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" learningrate\n        \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将激活函数设置为 sigmoid 函数")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("activation_function "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lambda")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" scipy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("special"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("expit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        \n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n")])])]),s("p",[s("strong",[t._v("生成权重")])]),t._v(" "),s("p",[t._v("生成连接权重使用 "),s("code",[t._v("numpy")]),t._v(" 函数库，该库支持大维度数组以及矩阵的运算，通过"),s("code",[t._v("numpy.random.rand(x, y)")]),t._v("可以快速生成一个 "),s("code",[t._v("x * y")]),t._v(" 的矩阵，每个数字都是一个 0 ~ 1 的随机数。因为导入库的时候使用了 "),s("code",[t._v("import numpy as np")]),t._v(" 命令，所有代码中可以用 "),s("code",[t._v("np")]),t._v(" 来代替 "),s("code",[t._v("numpy")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/FjWSNNZ758iVgqaGunY3LNYu60Iv.png",alt:"image"}})]),t._v(" "),s("p",[t._v("上面就是通过 "),s("code",[t._v("numpy.random.rand")]),t._v(" 方法生成一个 "),s("code",[t._v("3 * 3")]),t._v(" 矩阵的案例。减去0.5是为了保证生成的权重所有权重都能维持在 -0.5 ~ 0.5 之间的一个随机值。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/FuGnOobiInRSl4F9PXOP_Odn-YPj.png",alt:"image"}})]),t._v(" "),s("p",[s("strong",[t._v("激活函数")])]),t._v(" "),s("p",[s("code",[t._v("scipy.special")]),t._v(" 模块中包含了大量的函数库，利用 "),s("code",[t._v("scipy.special")]),t._v(" 库可以很方便快捷的构造出一个激活函数：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("activation_function "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lambda")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" scipy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("special"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("expit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h4",{attrs:{id:"查询神经网络"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查询神经网络"}},[t._v("#")]),t._v(" 查询神经网络")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查询神经网络    ")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("query")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" inputs_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将输入的数组转化为一个二维数组")]),t._v("\n        inputs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inputs_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ndmin"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("T\n        \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 计算输入数据与权重的点积")]),t._v("\n        hidden_inputs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("wih"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" inputs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 经过激活函数的到隐藏层数据")]),t._v("\n        hidden_outputs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("activation_function"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hidden_inputs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 计算隐藏层数据与权重的点积")]),t._v("\n        final_inputs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("who"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hidden_outputs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 最终到达输出层的数据")]),t._v("\n        final_outputs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("activation_function"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("final_inputs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        \n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" final_outputs\n")])])]),s("p",[t._v("查询神经网络的操作很简单，只需要使用 "),s("code",[t._v("numpy")]),t._v(" 的 "),s("code",[t._v("dot")]),t._v(" 方法对两个矩阵求点积即可。")]),t._v(" "),s("p",[t._v("这里有一个知识点，就是关于 "),s("code",[t._v("numpy")]),t._v(" 的数据类型，通过 "),s("code",[t._v("numpy.array")]),t._v(" 方法能够将 python 中的数组转为一个 N 维数组对象 "),s("code",[t._v("Ndarray")]),t._v("，该方法第二个参数就是表示转化后的维度。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/FnfUXxYR0zUQaBWUxp8RNZXxBpbr.png",alt:"image"}})]),t._v(" "),s("p",[t._v("上图是一个普通数组 "),s("code",[t._v("[1, 2, 3]")]),t._v(" 使用该方法转变成二维数组，返回 "),s("code",[t._v("[[1, 2, 3]]")]),t._v("。该方法还有个属性 T，本质是调用 "),s("code",[t._v("numpy")]),t._v(" 的 "),s("code",[t._v("transpose")]),t._v(" 方法，对数组进行轴对换，如下图所示。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/FvmwZV-hOpFrG2uVrO3G-_nVgRCc.png",alt:"image"}})]),t._v(" "),s("p",[t._v("通过转置我们就能得到一个合适的输入矩阵了。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/Fr4gSENAXsb-vwRuOkIc4OoIKT71.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://file.shenfq.com/Fjz5HdsAs_XNskbCwoyB8Q0-4laj.png",alt:"image"}})]),t._v(" "),s("h4",{attrs:{id:"训练神经网络"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#训练神经网络"}},[t._v("#")]),t._v(" 训练神经网络")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 训练神经网络")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("train")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" inputs_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" targets_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将输入数据与目标数据转为二维数组")]),t._v("\n        inputs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inputs_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ndmin"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("T\n        targets "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("targets_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ndmin"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("T\n        \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过矩阵点积和激活函数得到隐藏层的输出")]),t._v("\n        hidden_inputs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("wih"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" inputs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        hidden_outputs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("activation_function"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hidden_inputs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过矩阵点积和激活函数得到最终输出")]),t._v("\n        final_inputs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("who"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hidden_outputs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        final_outputs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("activation_function"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("final_inputs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取目标值与实际值的差值")]),t._v("\n        output_errors "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" targets "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" final_outputs\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 反向传播差值")]),t._v("\n        hidden_errors "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("who"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" output_errors"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n        \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过梯度下降法更新隐藏层到输出层的权重")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("who "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("output_errors "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" final_outputs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" final_outputs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n            np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("transpose"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hidden_outputs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过梯度下降法更新输入层到隐藏层的权重")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("wih "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hidden_errors "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" hidden_outputs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" hidden_outputs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n            np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("transpose"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inputs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        \n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n")])])]),s("p",[t._v("训练神经网络前半部分与查询类似，中间会将得到的差值通过求矩阵点积的方式进行反向传播，最后就是使用梯度下级的方法修正权重。其中 "),s("code",[t._v("self.lr")]),t._v(" 为梯度下降的学习率，这个值是限制梯度方向的速率，我们需要经常调整这个值来达到模型的最优解。")]),t._v(" "),s("h3",{attrs:{id:"进行训练"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进行训练"}},[t._v("#")]),t._v(" 进行训练")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置每一层的节点数量")]),t._v("\ninput_nodes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("784")]),t._v("\nhidden_nodes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\noutput_nodes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 学习率")]),t._v("\nlearning_rate "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建神经网络模型")]),t._v("\nn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" neuralNetwork"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input_nodes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("hidden_nodes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("output_nodes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" learning_rate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 加载训练数据")]),t._v("\ntraining_data_file "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"datasets/mnist_train_100.csv"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'r'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntraining_data_list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" training_data_file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readlines"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntraining_data_file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("close"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 训练神经网络")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# epochs 表示训练次数")]),t._v("\nepochs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" e "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("epochs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 遍历所有数据进行训练")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" record "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" training_data_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 数据通过 ',' 分割，变成一个数组")]),t._v("\n        all_values "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" record"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("split"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("','")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 分离出图片的像素点到一个单独数组")]),t._v("\n        inputs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("asfarray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("all_values"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("255.0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.99")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.01")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建目标输出值（数字 0~9 出现的概率，默认全部为 0.01）")]),t._v("\n        targets "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("zeros"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("output_nodes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.01")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# all_values[0] 表示手写数字的真实值，将该数字的概率设为 0.99")]),t._v("\n        targets"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("all_values"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.99")]),t._v("\n        n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("train"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inputs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" targets"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 训练完毕")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'done'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"验证训练结果"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#验证训练结果"}},[t._v("#")]),t._v(" 验证训练结果")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 加载测试数据")]),t._v("\ntest_data_file "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"datasets/mnist_test_10.csv"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'r'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntest_data_list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" test_data_file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readlines"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntest_data_file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("close"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 测试神经网络")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 记录所有的训练值，正确存 1 ，错误存 0 。")]),t._v("\nscorecard "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 遍历所有数据进行测试")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" record "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" test_data_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 数据通过 ',' 分割，变成一个数组")]),t._v("\n    all_values "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" record"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("split"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("','")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第一个数字为正确答案")]),t._v("\n    correct_label "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("all_values"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 取出测试的输入数据")]),t._v("\n    inputs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("asfarray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("all_values"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("255.0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.99")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.01")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查询神经网络")]),t._v("\n    outputs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("query"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inputs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 取出概率最大的数字，表示输出")]),t._v("\n    label "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("argmax"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outputs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 打印出真实值与查询值")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'act: '")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" label"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("' pre: '")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" correct_label"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("label "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" correct_label"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 神经网络查询结果与真实值匹配，记录数组存入 1")]),t._v("\n        scorecard"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 神经网络查询结果与真实值不匹配，记录数组存入 0")]),t._v("\n        scorecard"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 计算训练的成功率")]),t._v("\nscorecard_array "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("asarray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("scorecard"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"performance = "')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" scorecard_array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" scorecard_array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"完整代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#完整代码"}},[t._v("#")]),t._v(" 完整代码")]),t._v(" "),s("p",[t._v("要查看完整代码可以访问我的 github： "),s("a",{attrs:{href:"https://github.com/Shenfq/deep_neural_network/blob/master/NeuralNetWork.ipynb",target:"_blank",rel:"noopener noreferrer"}},[t._v("deep_neural_network"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("到这里整个深度神级网络的模型原理与实践已经全部进行完毕了，虽然有些部分概念讲解并不是那么仔细，但是你还可以通过搜索其他资料了解更多。感谢《Python神经网络编程》这本书，因为它才有了这个博客，如果感兴趣你也可以买来看看，这本书真的用很简单的语言描述了复杂的数学计算。")]),t._v(" "),s("p",[t._v("人工智能现在确实是一个非常火热的阶段，希望感兴趣的同学们多多尝试，但是也不要一昧的追新，忘记了自己本来的优势。")])])}),[],!1,null,null,null);s.default=e.exports}}]);